{"version":3,"sources":["containers/TemperatureInput.js","components/BoilingVerdict.js","containers/Calculator.js","index.js"],"names":["scalesName","c","f","Temperature","handleChange","event","temp","target","value","_this","props","onTemperatureChange","temperature","this","scale","react_default","a","createElement","type","name","onChange","Component","BoilingVerdict","celsius","toCelsius","fahrenheight","toFahrenheit","ConvertTemp","convert","input","parseFloat","Number","isNaN","output","Math","round","toString","Calculator","state","handleCelsiusChange","setState","handleFahrenheitChange","fahrenheit","TemperatureInput","components_BoilingVerdict","ReactDOM","render","containers_Calculator","document","getElementById"],"mappings":"uKAEMA,EAAa,CACjBC,EAAG,UACHC,EAAG,cA0BUC,6MAtBbC,aAAe,SAAAC,GACb,IAAMC,EAAOD,EAAME,OAAOC,MAC1BC,EAAKC,MAAMC,oBAAoBL,4EAI/B,IAAMM,EAAcC,KAAKH,MAAME,YACzBE,EAAQD,KAAKH,MAAMI,MACzB,OACEC,EAAAC,EAAAC,cAAA,gBACEF,EAAAC,EAAAC,cAAA,sCAA8BjB,EAAWc,GAAzC,KACAC,EAAAC,EAAAC,cAAA,SACEC,KAAK,OACLC,KAAK,UACLX,MAAOI,EACPQ,SAAUP,KAAKT,uBAhBCiB,aCGXC,EARQ,SAAAZ,GACrB,OAAIA,EAAMa,SAAW,IACZR,EAAAC,EAAAC,cAAA,iCAEAF,EAAAC,EAAAC,cAAA,sCCFX,SAASO,EAAUC,GACjB,OAA8B,GAArBA,EAAe,IAAW,EAGrC,SAASC,EAAaH,GACpB,OAAkB,EAAVA,EAAe,EAAI,GAG7B,SAASI,EAAYf,EAAagB,GAChC,IAAMC,EAAQC,WAAWlB,GACzB,GAAImB,OAAOC,MAAMH,GACf,MAAO,GAGT,IAAMI,EAASL,EAAQC,GAEvB,OADgBK,KAAKC,MAAe,IAATF,GAAiB,KAC7BG,eA0CFC,6MAtCbC,MAAQ,CACN1B,YAAa,GACbE,MAAO,OAGTyB,oBAAsB,SAAA3B,GACpBH,EAAK+B,SAAS,CAAE1B,MAAO,IAAKF,mBAG9B6B,uBAAyB,SAAA7B,GACvBH,EAAK+B,SAAS,CAAE1B,MAAO,IAAKF,yFAI5B,IAAMA,EAAcC,KAAKyB,MAAM1B,YACzBE,EAAQD,KAAKyB,MAAMxB,MACnBS,EACM,MAAVT,EAAgBa,EAAYf,EAAaY,GAAaZ,EAClD8B,EACM,MAAV5B,EAAgBa,EAAYf,EAAac,GAAgBd,EAC3D,OACEG,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC0B,EAAD,CACE7B,MAAM,IACNF,YAAaW,EACbZ,oBAAqBE,KAAK0B,sBAE5BxB,EAAAC,EAAAC,cAAC0B,EAAD,CACE7B,MAAM,IACNF,YAAa8B,EACb/B,oBAAqBE,KAAK4B,yBAE5B1B,EAAAC,EAAAC,cAAC2B,EAAD,CAAgBrB,QAASO,WAAWlB,aAjCnBS,aCpBzBwB,IAASC,OAAO/B,EAAAC,EAAAC,cAAC8B,EAAD,MAAgBC,SAASC,eAAe","file":"static/js/main.9942c56e.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nconst scalesName = {\n  c: \"Celsius\",\n  f: \"Fahrenheit\"\n};\n\nclass Temperature extends Component {\n  handleChange = event => {\n    const temp = event.target.value;\n    this.props.onTemperatureChange(temp);\n  };\n\n  render() {\n    const temperature = this.props.temperature;\n    const scale = this.props.scale;\n    return (\n      <fieldset>\n        <legend>Enter temperature in {scalesName[scale]}:</legend>\n        <input\n          type=\"text\"\n          name=\"celsius\"\n          value={temperature}\n          onChange={this.handleChange}\n        />\n      </fieldset>\n    );\n  }\n}\n\nexport default Temperature;\n","import React from \"react\";\n\nconst BoilingVerdict = props => {\n  if (props.celsius >= 100) {\n    return <p>The water would boil</p>;\n  } else {\n    return <p>The water would not boil</p>;\n  }\n};\n\nexport default BoilingVerdict;\n","import React, { Component } from \"react\";\nimport TemperatureInput from \"./TemperatureInput\";\nimport BoilingVerdict from \"../components/BoilingVerdict\";\n\nfunction toCelsius(fahrenheight) {\n  return ((fahrenheight - 32) * 5) / 9;\n}\n\nfunction toFahrenheit(celsius) {\n  return (celsius * 9) / 5 + 32;\n}\n\nfunction ConvertTemp(temperature, convert) {\n  const input = parseFloat(temperature);\n  if (Number.isNaN(input)) {\n    return \"\";\n  }\n\n  const output = convert(input);\n  const rounded = Math.round(output * 1000) / 1000;\n  return rounded.toString();\n}\n\nclass Calculator extends Component {\n  state = {\n    temperature: \"\",\n    scale: \"c\"\n  };\n\n  handleCelsiusChange = temperature => {\n    this.setState({ scale: \"c\", temperature });\n  };\n\n  handleFahrenheitChange = temperature => {\n    this.setState({ scale: \"f\", temperature });\n  };\n\n  render() {\n    const temperature = this.state.temperature;\n    const scale = this.state.scale;\n    const celsius =\n      scale === \"f\" ? ConvertTemp(temperature, toCelsius) : temperature;\n    const fahrenheit =\n      scale === \"c\" ? ConvertTemp(temperature, toFahrenheit) : temperature;\n    return (\n      <div>\n        <TemperatureInput\n          scale=\"c\"\n          temperature={celsius}\n          onTemperatureChange={this.handleCelsiusChange}\n        />\n        <TemperatureInput\n          scale=\"f\"\n          temperature={fahrenheit}\n          onTemperatureChange={this.handleFahrenheitChange}\n        />\n        <BoilingVerdict celsius={parseFloat(temperature)} />\n      </div>\n    );\n  }\n}\n\nexport default Calculator;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Calculator from \"./containers/Calculator\";\nReactDOM.render(<Calculator />, document.getElementById(\"root\"));\n"],"sourceRoot":""}